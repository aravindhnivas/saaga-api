# Generated by Django 3.2.22 on 2023-10-20 16:49

import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_rdkit.models.fields
from django.contrib.postgres.operations import CreateExtension
from django.db.migrations.operations.base import Operation


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        CreateExtension(name='rdkit'),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('organization', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                 related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                 related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Linelist',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('linelist_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.JSONField()),
                ('iupac_name', models.CharField(max_length=255, unique=True)),
                ('name_formula', models.CharField(max_length=255)),
                ('name_html', models.CharField(max_length=255)),
                ('smiles', models.CharField(max_length=255, unique=True)),
                ('standard_inchi', models.CharField(max_length=255, unique=True)),
                ('standard_inchi_key', models.CharField(
                    max_length=255, unique=True)),
                ('selfies', models.CharField(max_length=255, unique=True)),
                ('mol_obj', django_rdkit.models.fields.MolField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('entry_staff', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Species',
            },
        ),
        migrations.CreateModel(
            name='SpeciesMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('molecule_tag', models.IntegerField(blank=True, null=True)),
                ('hyperfine', models.BooleanField()),
                ('degree_of_freedom', models.IntegerField()),
                ('category', models.CharField(max_length=255)),
                ('partition_function', models.JSONField()),
                ('mu_a', core.models.ArbitraryDecimalField(null=True)),
                ('mu_b', core.models.ArbitraryDecimalField(null=True)),
                ('mu_c', core.models.ArbitraryDecimalField(null=True)),
                ('a_const', core.models.ArbitraryDecimalField(null=True)),
                ('b_const', core.models.ArbitraryDecimalField(null=True)),
                ('c_const', core.models.ArbitraryDecimalField(null=True)),
                ('data_date', models.DateField()),
                ('data_contributor', models.CharField(max_length=255)),
                ('int_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['int'])])),
                ('var_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['var'])])),
                ('fit_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['fit'])])),
                ('lin_file', models.FileField(null=True, upload_to=core.models.sp_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['lin'])])),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('entry_staff', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('linelist', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.linelist')),
                ('species', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.species')),
            ],
            options={
                'verbose_name_plural': 'Species metadata',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('doi', models.CharField(blank=True, max_length=255)),
                ('ref_url', models.CharField(max_length=255)),
                ('bibtex', models.FileField(upload_to=core.models.bib_file_path, validators=[
                 django.core.validators.FileExtensionValidator(allowed_extensions=['bib'])])),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('entry_staff', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MetaReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('dipole_moment', models.BooleanField()),
                ('spectrum', models.BooleanField()),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('entry_staff', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('meta', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.speciesmetadata')),
                ('ref', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.reference')),
            ],
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('measured', models.BooleanField()),
                ('frequency', core.models.ArbitraryDecimalField(null=True)),
                ('uncertainty', core.models.ArbitraryDecimalField(null=True)),
                ('intensity', core.models.ArbitraryDecimalField(null=True)),
                ('s_ij', core.models.ArbitraryDecimalField(null=True)),
                ('s_ij_mu2', core.models.ArbitraryDecimalField(null=True)),
                ('a_ij', core.models.ArbitraryDecimalField(null=True)),
                ('lower_state_energy', core.models.ArbitraryDecimalField(null=True)),
                ('upper_state_energy', core.models.ArbitraryDecimalField(null=True)),
                ('upper_state_degeneracy', models.IntegerField()),
                ('lower_state_qn', models.JSONField()),
                ('upper_state_qn', models.JSONField()),
                ('rovibrational', models.BooleanField()),
                ('pickett_qn_code', models.IntegerField()),
                ('pickett_lower_state_qn', models.JSONField()),
                ('pickett_upper_state_qn', models.JSONField()),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('entry_staff', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('meta', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='core.speciesmetadata')),
            ],
        ),

    ]
